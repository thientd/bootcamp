from vul_web.Encrypt import ContinuedFractions, Arithmetic, RSAvulnerableKeyGenerator
# #
# #
def hack_RSA(e, n):
    '''
    Finds d knowing (e,n)
    applying the Wiener continued fraction attack
    '''
    frac = ContinuedFractions.rational_to_contfrac(e, n)
    convergents = ContinuedFractions.convergents_from_contfrac(frac)

    for (k, d) in convergents:

        # check if d is actually the key
        if k != 0 and (e * d - 1) % k == 0:
            phi = (e * d - 1) // k
            s = n - phi + 1
            # check if the equation x^2 - s*x + n = 0
            # has integer roots
            discr = s * s - 4 * n
            if (discr >= 0):
                t = Arithmetic.is_perfect_square(discr)
                if t != -1 and (s + t) % 2 == 0:
                    print("Hacked!")
                    return d


# TEST functions
#
def test_hack_RSA():
    print("Testing Wiener Attack")
    times = 5

    while (times > 0):

        e = 40877062728619312431560259414233917415615556177807386650850476370819435850805230842010564730710649041959172350450939326964147060068695646158924166639782971250116853153273902764974976844134033230200411191246575729603229025799562666110347113451514191766618123523677529204596413217813880692388666674959908783642011590750720432183258627569378317276456221856442402215072394323975654016986594428435766131957294088969451629539224449316224680699670212042113865339414436188788224472329244900893795255959886662709258083552239724061612807811172539806331199748924795596066610733123512490058713077642672221048059067171658224543501
        n = 62607705413734042524585117090537174404252018654425815089132881280328167028480166542421167847594168893624959015917822512652577962399471305149373448313373491347911520678921824900627840687140081461900743952915047826940066389117006421658766920550998458477450738971211400887771766995397433809937452189188417450087759175699715876446721692874642202950240314931791322878992091017484445168630077662146558791417094206967208725570323263097363931656088545391538698045113195926848757134123896357526249868932553475753132991127999828430383828544667152266354062343822864445714315635436243324407547278779905932674813640607176052175049
        hacked_d = hack_RSA(e, n)

        print("hacked_d = ", hacked_d)
        print("-------------------------")
        times -= 1


if __name__ == "__main__":
    # test_is_perfect_square()
    # print("-------------------------")
    test_hack_RSA()
# # # # c: 1778673018511075140350698252891639557906407090250539057221806340768776705763113815373271713598206734943304136885307657644746166557801527614555955063613958550715606102502660768573300084767410478866161295739179626743292839204862654148472896949835346074323716667404949929701903737872090588147698250826373180618
# # # #
# # # # n: 77531969503748326589677418948315140870584015245386763633241518845356850979564402923266696704186567270006361208862086254527576010412135230279553684940635956656649728134893874567619948675304052482720430367748612708917105846534082863042823913166120865362252479206576942147071396319459112580853771742537940112457
# # # #
# # # # e: 56172436577459725698934391359139104915041430213184221292301658571726414059411889155782982024019814564512291421932489731563519296372873415080546379424619308859152360214209740169135159761234894923144971372974038021945201954600238994209605035703317119192844975463915465725406543097929017637859019950590916533609
# # # # print(hex(pow(hacked_d,1778673018511075140350698252891639557906407090250539057221806340768776705763113815373271713598206734943304136885307657644746166557801527614555955063613958550715606102502660768573300084767410478866161295739179626743292839204862654148472896949835346074323716667404949929701903737872090588147698250826373180618  ,n)))
# # # d = 65537
# # # n = 77531969503748326589677418948315140870584015245386763633241518845356850979564402923266696704186567270006361208862086254527576010412135230279553684940635956656649728134893874567619948675304052482720430367748612708917105846534082863042823913166120865362252479206576942147071396319459112580853771742537940112457
# # # c = 1778673018511075140350698252891639557906407090250539057221806340768776705763113815373271713598206734943304136885307657644746166557801527614555955063613958550715606102502660768573300084767410478866161295739179626743292839204862654148472896949835346074323716667404949929701903737872090588147698250826373180618
# # # plain = str(hex(pow(c, d, n)))[2::]
# # # print(''.join([chr(int(''.join(c), 16)) for c in zip(plain[0::2],plain[1::2])]))
# e, n, d = RSAvulnerableKeyGenerator.generateKeys(2048)
# print(e)
# print(n)
# print(d)
#